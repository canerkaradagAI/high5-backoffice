const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function debugTaskDefinitions() {
  try {
    console.log('üîç Debug: TaskDefinition verilerini kontrol ediyorum...');
    
    // T√ºm g√∂rev tanƒ±mlarƒ±nƒ± al
    const taskDefinitions = await prisma.taskDefinition.findMany({
      include: {
        createdBy: {
          select: {
            firstName: true,
            lastName: true
          }
        }
      },
      orderBy: [
        { role: 'asc' },
        { name: 'asc' }
      ]
    });
    
    console.log('üìä Toplam g√∂rev tanƒ±mƒ± sayƒ±sƒ±:', taskDefinitions.length);
    
    // Her g√∂rev tanƒ±mƒ±nƒ± detaylƒ± g√∂ster
    taskDefinitions.forEach((td, index) => {
      console.log(`\n${index + 1}. ${td.name}`);
      console.log(`   - ID: ${td.id}`);
      console.log(`   - Rol: ${td.role}`);
      console.log(`   - Aktif: ${td.isActive}`);
      console.log(`   - √úr√ºn Kodu Gerekli: ${td.requiresProductCode}`);
      console.log(`   - A√ßƒ±klama: ${td.description || 'Yok'}`);
      console.log(`   - Olu≈üturan: ${td.createdBy?.firstName} ${td.createdBy?.lastName}`);
      console.log(`   - Olu≈üturulma: ${td.createdAt}`);
    });
    
    // √ñzellikle "M√º≈üteriye √úr√ºn Getir" g√∂revini kontrol et
    const specificTask = await prisma.taskDefinition.findUnique({
      where: {
        name_role: {
          name: 'M√º≈üteriye √úr√ºn Getir',
          role: 'Runner'
        }
      }
    });
    
    if (specificTask) {
      console.log('\n‚úÖ "M√º≈üteriye √úr√ºn Getir" g√∂rev tanƒ±mƒ± mevcut:');
      console.log('   - ID:', specificTask.id);
      console.log('   - Aktif:', specificTask.isActive);
    } else {
      console.log('\n‚ùå "M√º≈üteriye √úr√ºn Getir" g√∂rev tanƒ±mƒ± bulunamadƒ±!');
    }
    
  } catch (error) {
    console.error('‚ùå Hata:', error.message);
    console.error('Detay:', error);
  } finally {
    await prisma.$disconnect();
  }
}

debugTaskDefinitions();
