import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function updateProductPrices() {
  try {
    console.log('üí∞ √úr√ºn fiyatlarƒ± g√ºncelleniyor...');
    
    // T√ºm √ºr√ºnleri getir
    const products = await prisma.product.findMany({
      select: {
        id: true,
        sku: true,
        name: true,
        price: true
      }
    });
    
    console.log(`üìä Toplam ${products.length} √ºr√ºn bulundu`);
    
    let updatedCount = 0;
    
    for (const product of products) {
      // 5999 ile 8999 arasƒ±nda rastgele fiyat olu≈ütur
      const minPrice = 5999;
      const maxPrice = 8999;
      const randomPrice = Math.floor(Math.random() * (maxPrice - minPrice + 1)) + minPrice;
      
      await prisma.product.update({
        where: { id: product.id },
        data: { price: randomPrice }
      });
      
      updatedCount++;
      
      // Her 100 √ºr√ºnde bir progress g√∂ster
      if (updatedCount % 100 === 0) {
        console.log(`üìà G√ºncellenen: ${updatedCount}/${products.length}`);
      }
    }
    
    console.log('\n‚úÖ Fiyat g√ºncelleme i≈ülemi tamamlandƒ±!');
    console.log(`üí∞ ${updatedCount} √ºr√ºn√ºn fiyatƒ± g√ºncellendi`);
    console.log(`üìä Fiyat aralƒ±ƒüƒ±: 5999 - 8999 TL`);
    
    // √ñrnek fiyatlarƒ± g√∂ster
    const sampleProducts = await prisma.product.findMany({
      take: 5,
      select: {
        sku: true,
        name: true,
        price: true
      }
    });
    
    console.log('\nüìã √ñrnek √ºr√ºnler:');
    sampleProducts.forEach(product => {
      console.log(`   ‚Ä¢ ${product.sku} - ${product.name}: ${product.price} TL`);
    });
    
  } catch (error) {
    console.error('‚ùå Fiyat g√ºncelleme i≈üleminde hata:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Script'i √ßalƒ±≈ütƒ±r
updateProductPrices();
