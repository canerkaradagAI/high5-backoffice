generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String     @id @default(cuid())
  name                String?
  email               String     @unique
  password            String?
  emailVerified       DateTime?
  image               String?
  phone               String?
  firstName           String?
  lastName            String?
  isActive            Boolean    @default(true)
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  accounts            Account[]
  consultingCustomers Customer[] @relation("ConsultantToCustomer")
  sessions            Session[]
  createdTasks        Task[]     @relation("CreatedByUser")
  assignedTasks       Task[]     @relation("AssignedUser")
  userRoles           UserRole[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Role {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String?
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  rolePermissions RolePermission[]
  userRoles       UserRole[]
}

model Permission {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String?
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  rolePermissions RolePermission[]
}

model UserRole {
  id         String   @id @default(cuid())
  userId     String
  roleId     String
  isActive   Boolean  @default(true)
  assignedAt DateTime @default(now())
  assignedBy String?
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  isActive     Boolean    @default(true)
  assignedAt   DateTime   @default(now())
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

model Customer {
  id                   String    @id @default(cuid())
  firstName            String
  lastName             String
  fullName             String
  phone                String    @unique
  email                String?
  tcNumber             String?   @unique
  segment              String?
  address              String?
  neighborhood         String?
  street               String?
  buildingNo           String?
  apartmentNo          String?
  fullAddress          String?
  city                 String?
  district             String?
  birthDate            DateTime?
  gender               String?
  preferredContact     String?
  notes                String?
  consentPersonalData  Boolean   @default(false)
  consentMarketing     Boolean   @default(false)
  consentCall          Boolean   @default(false)
  consentProfiling     Boolean   @default(false)
  isActive             Boolean   @default(true)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  totalSpent           Float     @default(0)
  totalOrders          Int       @default(0)
  lastVisit            DateTime?
  averageOrderValue    Float     @default(0)
  assignedConsultantId String?
  carts                Cart[]
  assignedConsultant   User?     @relation("ConsultantToCustomer", fields: [assignedConsultantId], references: [id])
  sales                Sale[]
  tasks                Task[]
}

model Task {
  id           String    @id @default(cuid())
  title        String
  description  String?
  type         String
  priority     String    @default("Normal")
  status       String    @default("Bekliyor")
  dueDate      DateTime?
  completedAt  DateTime?
  notes        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  assignedToId String?
  createdById  String
  customerId   String?
  customer     Customer? @relation(fields: [customerId], references: [id])
  createdBy    User      @relation("CreatedByUser", fields: [createdById], references: [id])
  assignedTo   User?     @relation("AssignedUser", fields: [assignedToId], references: [id])
}

model Sale {
  id          String   @id @default(cuid())
  customerId  String
  title       String
  description String?
  imageUrl    String?
  invoiceDate DateTime
  amount      Float
  createdAt   DateTime @default(now())
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([customerId, invoiceDate])
}

model Cart {
  id          String     @id @default(cuid())
  customerId  String
  status      String     @default("OPEN")
  totalAmount Float      @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  customer    Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  items       CartItem[]

  @@index([customerId, status])
}

model CartItem {
  id          String   @id @default(cuid())
  cartId      String
  productId   String?
  sku         String?
  title       String
  quantity    Int      @default(1)
  unitPrice   Float    @default(0)
  createdAt   DateTime @default(now())
  description String?
  imageUrl    String?
  product     Product? @relation(fields: [productId], references: [id])
  cart        Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
}

model Product {
  id          String     @id @default(cuid())
  sku         String     @unique
  name        String
  description String?
  imageUrl    String?
  price       Float
  category    String?
  brand       String?
  color       String?
  size        String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  cartItems   CartItem[]
}

model Parameter {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  type        String
  description String?
  category    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
